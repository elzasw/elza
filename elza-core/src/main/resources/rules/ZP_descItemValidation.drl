package ZP2015;


import java.util.Arrays;
import cz.tacr.elza.drools.model.VOLevel
import cz.tacr.elza.domain.vo.DataValidationResult
import cz.tacr.elza.drools.model.DescItemVO;
import cz.tacr.elza.domain.RulArrangementType;

global java.util.List results;
global cz.tacr.elza.domain.RulArrangementType arrType;

function boolean isLeaf(VOLevel level){
    return level.getChilds() == null || level.getChilds().isEmpty();
}

function boolean hasParentsAttribute(VOLevel level, String attributeName){
    VOLevel parent = level.getParent();

    while(parent != null){
        boolean hasAttr = hasLevelAttribute(parent, attributeName);
        if(hasAttr){
            return true;
        }

        parent = parent.getParent();
    }

    return false;
}

function boolean hasLevelAttribute(VOLevel level, String attributeName){
    return getLevelAttribute(level, attributeName) != null;

}

function DescItemVO getLevelAttribute(VOLevel level, String attributeName){
     if(level.getDescItems() == null){
         return null;
     } else{
         for (DescItemVO descItem : level.getDescItems()) {
            if(descItem.getType().equals(attributeName)){
                 return descItem;
            }
         }
         return null;
     }
}

function boolean hasLevelRequiredTypeSpec(VOLevel level, String typeCode, String requiredSpecCode){
    if(level.getDescItems() == null){
        return false;
    }


    for (DescItemVO descItem : level.getDescItems()) {
        if(typeCode.equals(descItem.getType()) && requiredSpecCode.equals(descItem.getSpecCode())){
            return true;
        }
    }
    return false;
}



rule "Kontrola u posledního node/levelu stromu (listu), zda je v jeho větvi (od něj až po root) alespoň jednou uveden atribut ZP2015_TITLE"
when
    level: VOLevel()
    eval(isLeaf(level))
    eval(!hasLevelAttribute(level, "ZP2015_TITLE") && !hasParentsAttribute(level, "ZP2015_TITLE"))
then
	results.add(DataValidationResult.createMissing("ZP2015_TITLE", "V hierarchii archivního popisu není uveden atribut ZP2015_TITLE"));
end


rule "Kontrola root levelu/node na atribut ZP2015_LEVEL_TYPE, zda je správně podřízenost/nadřízenost"
when
    //jedná se o level přímo pod rootem
    level: VOLevel(parent != null, parent.getParent() == null)
    eval(hasLevelAttribute(level, "ZP2015_LEVEL_TYPE"))
    eval(!hasLevelRequiredTypeSpec(level, "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_SERIES"))
then
    DescItemVO typeItem = getLevelAttribute(level, "ZP2015_LEVEL_TYPE");
    results.add(DataValidationResult.createError(typeItem.getDescItemId(), "Chybně uvedená úroveň popisu: " + typeItem.getSpecCode()+" nesmí být pod kořenovým uzlem."));
end

rule "Kontrola ZP2015_LEVEL_SERIES levelu/node na atribut ZP2015_LEVEL_TYPE, zda je správně podřízenost/nadřízenost"
when
    level: VOLevel(parent != null)
    eval(hasLevelAttribute(level, "ZP2015_LEVEL_TYPE"))
    eval(hasLevelAttribute(level.getParent(), "ZP2015_LEVEL_TYPE"))

    eval(hasLevelRequiredTypeSpec(level.getParent(), "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_SERIES")
            &&

            (   !hasLevelRequiredTypeSpec(level, "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_SERIES")
            &&  !hasLevelRequiredTypeSpec(level, "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_FOLDER")
            &&  !hasLevelRequiredTypeSpec(level, "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_ITEM")
               )
        )
then
    DescItemVO typeItem = getLevelAttribute(level, "ZP2015_LEVEL_TYPE");
    DescItemVO parentItem = getLevelAttribute(level.getParent(), "ZP2015_LEVEL_TYPE");
    results.add(DataValidationResult.createError(typeItem.getDescItemId(), "Chybně uvedená úroveň popisu: " + typeItem.getSpecCode()+", nadřízená je: "+parentItem.getSpecCode()));
end

rule "Kontrola ZP2015_LEVEL_FOLDER levelu/node na atribut ZP2015_LEVEL_TYPE, zda je správně podřízenost/nadřízenost"
when
    level: VOLevel(parent != null)
    eval(hasLevelAttribute(level, "ZP2015_LEVEL_TYPE"))
    eval(hasLevelAttribute(level.getParent(), "ZP2015_LEVEL_TYPE"))

    eval(hasLevelRequiredTypeSpec(level.getParent(), "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_FOLDER")
        &&  (!hasLevelRequiredTypeSpec(level, "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_FOLDER")
            &&!hasLevelRequiredTypeSpec(level, "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_ITEM")
            )
        )


    eval(!(hasLevelRequiredTypeSpec(level.getParent(), "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_ITEM")
        &&  !hasLevelRequiredTypeSpec(level, "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_PART")
        ))


    eval(!(hasLevelRequiredTypeSpec(level.getParent(), "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_PART")
        &&  !hasLevelRequiredTypeSpec(level, "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_PART")
        ))
then
    DescItemVO typeItem = getLevelAttribute(level, "ZP2015_LEVEL_TYPE");
    DescItemVO parentItem = getLevelAttribute(level.getParent(), "ZP2015_LEVEL_TYPE");
    results.add(DataValidationResult.createError(typeItem.getDescItemId(), "Chybně uvedená úroveň popisu: " + typeItem.getSpecCode()+", nadřízená je: "+parentItem.getSpecCode()));
end

rule "Kontrola ZP2015_LEVEL_ITEM levelu/node na atribut ZP2015_LEVEL_TYPE, zda je správně podřízenost/nadřízenost"
when
    level: VOLevel(parent != null)
    eval(hasLevelAttribute(level, "ZP2015_LEVEL_TYPE"))
    eval(hasLevelAttribute(level.getParent(), "ZP2015_LEVEL_TYPE"))

    eval(hasLevelRequiredTypeSpec(level.getParent(), "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_ITEM")
        &&  !hasLevelRequiredTypeSpec(level, "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_PART")
        )
then
    DescItemVO typeItem = getLevelAttribute(level, "ZP2015_LEVEL_TYPE");
    DescItemVO parentItem = getLevelAttribute(level.getParent(), "ZP2015_LEVEL_TYPE");
    results.add(DataValidationResult.createError(typeItem.getDescItemId(), "Chybně uvedená úroveň popisu: " + typeItem.getSpecCode()+", nadřízená je: "+parentItem.getSpecCode()));
end

rule "Kontrola ZP2015_LEVEL_PART levelu/node na atribut ZP2015_LEVEL_TYPE, zda je správně podřízenost/nadřízenost"
when
    level: VOLevel(parent != null)
    eval(hasLevelAttribute(level, "ZP2015_LEVEL_TYPE"))
    eval(hasLevelAttribute(level.getParent(), "ZP2015_LEVEL_TYPE"))

    eval(hasLevelRequiredTypeSpec(level.getParent(), "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_PART")
        &&  !hasLevelRequiredTypeSpec(level, "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_PART")
        )
then
    DescItemVO typeItem = getLevelAttribute(level, "ZP2015_LEVEL_TYPE");
    DescItemVO parentItem = getLevelAttribute(level.getParent(), "ZP2015_LEVEL_TYPE");
    results.add(DataValidationResult.createError(typeItem.getDescItemId(), "Chybně uvedená úroveň popisu: " + typeItem.getSpecCode()+", nadřízená je: "+parentItem.getSpecCode()));
end


rule "Kontrola koncových uzlů typu série a jednotlivost"
when
    //jedná se o level přímo pod rootem
    level: VOLevel()
    eval(arrType.getCode().equals("KAT"))
    eval(isLeaf(level))
    eval(hasLevelAttribute(level, "ZP2015_LEVEL_TYPE"))

    eval(hasLevelAttribute(level.getParent(), "ZP2015_LEVEL_TYPE"))
    eval(hasLevelRequiredTypeSpec(level, "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_FOLDER")
        ||
         hasLevelRequiredTypeSpec(level, "ZP2015_LEVEL_TYPE", "ZP2015_LEVEL_SERIES"))
then
    DescItemVO typeItem = getLevelAttribute(level, "ZP2015_LEVEL_TYPE");
    results.add(DataValidationResult.createError(typeItem.getDescItemId(), "Chybně ukončená úroveň popisu v "+arrType.getCode()+": "+typeItem.getSpecCode()));
end







