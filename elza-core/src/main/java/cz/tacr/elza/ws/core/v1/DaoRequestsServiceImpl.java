
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package cz.tacr.elza.ws.core.v1;

import cz.tacr.elza.api.ArrRequest;
import cz.tacr.elza.domain.ArrDaoRequest;
import cz.tacr.elza.domain.ArrDaoRequestDao;
import cz.tacr.elza.exception.BusinessException;
import cz.tacr.elza.exception.codes.DigitizationCode;
import cz.tacr.elza.repository.DaoRequestDaoRepository;
import cz.tacr.elza.repository.DaoRequestRepository;
import cz.tacr.elza.service.RequestService;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collections;
import java.util.List;

/**
 * This class was generated by Apache CXF 3.1.8
 * 2016-12-09T13:06:28.057+01:00
 * Generated source version: 3.1.8
 *
 */

@Component
@javax.jws.WebService(
                      serviceName = "CoreService",
                      portName = "DaoRequestsService",
                      targetNamespace = "http://elza.tacr.cz/ws/core/v1",
//                      wsdlLocation = "file:elza-core-v1.wsdl",
                      endpointInterface = "cz.tacr.elza.ws.core.v1.DaoRequestsService")

public class DaoRequestsServiceImpl implements DaoRequestsService {

    private Log logger = LogFactory.getLog(this.getClass());

    @Autowired
    private DaoRequestRepository daoRequestRepository;

    @Autowired
    private cz.tacr.elza.service.DaoService daoService;

    @Autowired
    private DaoRequestDaoRepository daoRequestDaoRepository;

    @Autowired
    private RequestService requestService;

    /* (non-Javadoc)
     * @see cz.tacr.elza.ws.core.v1.DaoRequestsService#destructionRequestRevoked(cz.tacr.elza.ws.types.v1.RequestRevoked requestRevoked)*
     */
    @Transactional
    public void destructionRequestRevoked(cz.tacr.elza.ws.types.v1.RequestRevoked requestRevoked) throws CoreServiceException   {
        try {
            logger.info("Executing operation destructionRequestRevoked");

            final List<ArrDaoRequest> daoLinkRequestList = daoRequestRepository.findByCode(requestRevoked.getIdentifier());
            for (ArrDaoRequest arrDaoLinkRequest : daoLinkRequestList) {
                requestService.setRequestState(arrDaoLinkRequest, arrDaoLinkRequest.getState(), ArrRequest.State.REJECTED);
                arrDaoLinkRequest.setRejectReason(requestRevoked.getDescription());
                daoRequestRepository.save(arrDaoLinkRequest);
            }

            logger.info("Ending operation destructionRequestRevoked");
        } catch (Exception e) {
            logger.error("Fail operation destructionRequestRevoked", e);
            throw new CoreServiceException("Fail operation destructionRequestRevoked", e);
        }
    }

    /* (non-Javadoc)
     * @see cz.tacr.elza.ws.core.v1.DaoRequestsService#transferRequestFinished(java.lang.String requestIdentifier)*
     */
    @Transactional
    public void transferRequestFinished(java.lang.String requestIdentifier) throws CoreServiceException   {
        try {
            logger.info("Executing operation transferRequestFinished");

            final List<ArrDaoRequest> daoRequestList = daoRequestRepository.findByCode(requestIdentifier);
            for (ArrDaoRequest arrDaoRequest : daoRequestList) {
                if (cz.tacr.elza.api.ArrDaoRequest.Type.TRANSFER.equals(arrDaoRequest.getType())) {
                    finishDaoRequest(arrDaoRequest);
                } else {
                    throw new BusinessException(DigitizationCode.UNWANTED_REQUEST_TYPE);
                }
            }

            logger.info("Ending operation transferRequestFinished");
        } catch (Exception e) {
            logger.error("Fail operation transferRequestFinished", e);
            throw new CoreServiceException("Fail operation transferRequestFinished", e);
        }
    }

    /* (non-Javadoc)
     * @see cz.tacr.elza.ws.core.v1.DaoRequestsService#transferRequestRevoked(cz.tacr.elza.ws.types.v1.RequestRevoked requestRevoked)*
     */
    @Transactional
    public void transferRequestRevoked(cz.tacr.elza.ws.types.v1.RequestRevoked requestRevoked) throws CoreServiceException   {
        try {
            logger.info("Executing operation transferRequestRevoked");

            final List<ArrDaoRequest> daoLinkRequestList = daoRequestRepository.findByCode(requestRevoked.getIdentifier());

            for (ArrDaoRequest arrDaoLinkRequest : daoLinkRequestList) {
                if (arrDaoLinkRequest.getType().equals(cz.tacr.elza.api.ArrDaoRequest.Type.TRANSFER)) {
                    requestService.setRequestState(arrDaoLinkRequest, arrDaoLinkRequest.getState(), ArrRequest.State.REJECTED);
                    arrDaoLinkRequest.setRejectReason(requestRevoked.getDescription());
                    daoRequestRepository.save(arrDaoLinkRequest);
                } else {
                    throw new CoreServiceException("Operace transferRequestRevoked byla spučtěna nad requertem typu " + arrDaoLinkRequest.getType());
                }
            }

            logger.info("Ending operation transferRequestRevoked");
        } catch (Exception e) {
            logger.error("Fail operation transferRequestRevoked", e);
            throw new CoreServiceException("Fail operation removeDao", e);
        }
    }

    /*
     * @see cz.tacr.elza.ws.core.v1.DaoRequestsService#destructionRequestFinished(java.lang.String requestIdentifier)*
     */
    @Transactional
    public void destructionRequestFinished(java.lang.String requestIdentifier) throws CoreServiceException {
        try {
            logger.info("Executing operation destructionRequestFinished");

            final List<ArrDaoRequest> daoLinkRequestList = daoRequestRepository.findByCode(requestIdentifier);
            for (ArrDaoRequest arrDaoRequest : daoLinkRequestList) {
                if (cz.tacr.elza.api.ArrDaoRequest.Type.DESTRUCTION.equals(arrDaoRequest.getType())) {
                    finishDaoRequest(arrDaoRequest);
                } else {
                    throw new BusinessException(DigitizationCode.UNWANTED_REQUEST_TYPE);
                }
            }


            logger.info("Ending operation destructionRequestFinished");
        } catch (Exception e) {
            logger.error("Fail operation destructionRequestFinished", e);
            throw new CoreServiceException("Fail operation destructionRequestFinished", e);
        }
    }

    private void finishDaoRequest(ArrDaoRequest arrDaoRequest) {
        requestService.setRequestState(arrDaoRequest, arrDaoRequest.getState(), ArrRequest.State.ACCEPTED);

        // Označí všechny DAO z požadavku jako neplatné a ukončí jeho případné linky na JP bez notifikace
        final List<ArrDaoRequestDao> arrDaoRequestDaoList = daoRequestDaoRepository.findByDaoRequest(arrDaoRequest);
        for (ArrDaoRequestDao arrDaoRequestDao : arrDaoRequestDaoList) {
            daoService.deleteDaos(Collections.singletonList(arrDaoRequestDao.getDao()));
        }
    }

}
