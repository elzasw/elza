package cz.tacr.elza.ws.core.v1;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.1.8
 * 2016-12-09T13:06:28.074+01:00
 * Generated source version: 3.1.8
 * 
 */
@WebServiceClient(name = "CoreService",
                  wsdlLocation = "file:elza-core-v1.wsdl",
                  targetNamespace = "http://elza.tacr.cz/ws/core/v1") 
public class CoreService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://elza.tacr.cz/ws/core/v1", "CoreService");
    public final static QName DaoCoreService = new QName("http://elza.tacr.cz/ws/core/v1", "DaoCoreService");
    public final static QName DaoDigitizationService = new QName("http://elza.tacr.cz/ws/core/v1", "DaoDigitizationService");
    public final static QName DaoRequestsService = new QName("http://elza.tacr.cz/ws/core/v1", "DaoRequestsService");
    static {
        URL url = null;
        try {
            url = new URL("file:elza-core-v1.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(CoreService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:elza-core-v1.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public CoreService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CoreService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CoreService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public CoreService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public CoreService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public CoreService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns DaoService
     */
    @WebEndpoint(name = "DaoCoreService")
    public DaoService getDaoCoreService() {
        return super.getPort(DaoCoreService, DaoService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DaoService
     */
    @WebEndpoint(name = "DaoCoreService")
    public DaoService getDaoCoreService(WebServiceFeature... features) {
        return super.getPort(DaoCoreService, DaoService.class, features);
    }


    /**
     *
     * @return
     *     returns DaoDigitizationService
     */
    @WebEndpoint(name = "DaoDigitizationService")
    public DaoDigitizationService getDaoDigitizationService() {
        return super.getPort(DaoDigitizationService, DaoDigitizationService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DaoDigitizationService
     */
    @WebEndpoint(name = "DaoDigitizationService")
    public DaoDigitizationService getDaoDigitizationService(WebServiceFeature... features) {
        return super.getPort(DaoDigitizationService, DaoDigitizationService.class, features);
    }


    /**
     *
     * @return
     *     returns DaoRequestsService
     */
    @WebEndpoint(name = "DaoRequestsService")
    public DaoRequestsService getDaoRequestsService() {
        return super.getPort(DaoRequestsService, DaoRequestsService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DaoRequestsService
     */
    @WebEndpoint(name = "DaoRequestsService")
    public DaoRequestsService getDaoRequestsService(WebServiceFeature... features) {
        return super.getPort(DaoRequestsService, DaoRequestsService.class, features);
    }

}
