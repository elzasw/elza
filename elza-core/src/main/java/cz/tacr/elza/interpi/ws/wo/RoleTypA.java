//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.11.24 at 04:42:06 PM CET 
//


package cz.tacr.elza.interpi.ws.wo;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for roleTypA.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="roleTypA"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="bratr"/&gt;
 *     &lt;enumeration value="sestra"/&gt;
 *     &lt;enumeration value="další rodinné vztahy"/&gt;
 *     &lt;enumeration value="jiná entita reprezentující tutéž osobu"/&gt;
 *     &lt;enumeration value="člen rodiny/rodu"/&gt;
 *     &lt;enumeration value="členská organizace"/&gt;
 *     &lt;enumeration value="člen"/&gt;
 *     &lt;enumeration value="místo"/&gt;
 *     &lt;enumeration value="sídlo"/&gt;
 *     &lt;enumeration value="manžel"/&gt;
 *     &lt;enumeration value="manželka"/&gt;
 *     &lt;enumeration value="zaměstnavatel"/&gt;
 *     &lt;enumeration value="spolupracovník"/&gt;
 *     &lt;enumeration value="nadřízený"/&gt;
 *     &lt;enumeration value="škola"/&gt;
 *     &lt;enumeration value="pracoviště"/&gt;
 *     &lt;enumeration value="ceremoniál ocenění"/&gt;
 *     &lt;enumeration value="udělené ocenění"/&gt;
 *     &lt;enumeration value="udělovatel"/&gt;
 *     &lt;enumeration value="otec"/&gt;
 *     &lt;enumeration value="matka"/&gt;
 *     &lt;enumeration value="jiný předek"/&gt;
 *     &lt;enumeration value="nadžízená korporace"/&gt;
 *     &lt;enumeration value="je část..."/&gt;
 *     &lt;enumeration value="majitel"/&gt;
 *     &lt;enumeration value="předchůdce"/&gt;
 *     &lt;enumeration value="nástupce"/&gt;
 *     &lt;enumeration value="dokument"/&gt;
 *     &lt;enumeration value="umístění"/&gt;
 *     &lt;enumeration value="pojmenováno po"/&gt;
 *     &lt;enumeration value="majitel"/&gt;
 *     &lt;enumeration value="písemná zmínka"/&gt;
 *     &lt;enumeration value="zmínka o existenci"/&gt;
 *     &lt;enumeration value="součást, celek"/&gt;
 *     &lt;enumeration value="autor/tvůrce"/&gt;
 *     &lt;enumeration value="související entita"/&gt;
 *     &lt;enumeration value="nadřazená entita"/&gt;
 *     &lt;enumeration value="podřazená entita"/&gt;
 *     &lt;enumeration value="jiný"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "roleTypA")
@XmlEnum
public enum RoleTypA {

    @XmlEnumValue("bratr")
    BRATR("bratr"),
    @XmlEnumValue("sestra")
    SESTRA("sestra"),
    @XmlEnumValue("dal\u0161\u00ed rodinn\u00e9 vztahy")
    DALŠÍ_RODINNÉ_VZTAHY("dal\u0161\u00ed rodinn\u00e9 vztahy"),
    @XmlEnumValue("jin\u00e1 entita reprezentuj\u00edc\u00ed tut\u00e9\u017e osobu")
    JINÁ_ENTITA_REPREZENTUJÍCÍ_TUTÉŽ_OSOBU("jin\u00e1 entita reprezentuj\u00edc\u00ed tut\u00e9\u017e osobu"),
    @XmlEnumValue("\u010dlen rodiny/rodu")
    ČLEN_RODINY_RODU("\u010dlen rodiny/rodu"),
    @XmlEnumValue("\u010dlensk\u00e1 organizace")
    ČLENSKÁ_ORGANIZACE("\u010dlensk\u00e1 organizace"),
    @XmlEnumValue("\u010dlen")
    ČLEN("\u010dlen"),
    @XmlEnumValue("m\u00edsto")
    MÍSTO("m\u00edsto"),
    @XmlEnumValue("s\u00eddlo")
    SÍDLO("s\u00eddlo"),
    @XmlEnumValue("man\u017eel")
    MANŽEL("man\u017eel"),
    @XmlEnumValue("man\u017eelka")
    MANŽELKA("man\u017eelka"),
    @XmlEnumValue("zam\u011bstnavatel")
    ZAMĚSTNAVATEL("zam\u011bstnavatel"),
    @XmlEnumValue("spolupracovn\u00edk")
    SPOLUPRACOVNÍK("spolupracovn\u00edk"),
    @XmlEnumValue("nad\u0159\u00edzen\u00fd")
    NADŘÍZENÝ("nad\u0159\u00edzen\u00fd"),
    @XmlEnumValue("\u0161kola")
    ŠKOLA("\u0161kola"),
    @XmlEnumValue("pracovi\u0161t\u011b")
    PRACOVIŠTĚ("pracovi\u0161t\u011b"),
    @XmlEnumValue("ceremoni\u00e1l ocen\u011bn\u00ed")
    CEREMONIÁL_OCENĚNÍ("ceremoni\u00e1l ocen\u011bn\u00ed"),
    @XmlEnumValue("ud\u011blen\u00e9 ocen\u011bn\u00ed")
    UDĚLENÉ_OCENĚNÍ("ud\u011blen\u00e9 ocen\u011bn\u00ed"),
    @XmlEnumValue("ud\u011blovatel")
    UDĚLOVATEL("ud\u011blovatel"),
    @XmlEnumValue("otec")
    OTEC("otec"),
    @XmlEnumValue("matka")
    MATKA("matka"),
    @XmlEnumValue("jin\u00fd p\u0159edek")
    JINÝ_PŘEDEK("jin\u00fd p\u0159edek"),
    @XmlEnumValue("nad\u017e\u00edzen\u00e1 korporace")
    NADŽÍZENÁ_KORPORACE("nad\u017e\u00edzen\u00e1 korporace"),
    @XmlEnumValue("je \u010d\u00e1st...")
    JE_ČÁST("je \u010d\u00e1st..."),
    @XmlEnumValue("majitel")
    MAJITEL("majitel"),
    @XmlEnumValue("p\u0159edch\u016fdce")
    PŘEDCHŮDCE("p\u0159edch\u016fdce"),
    @XmlEnumValue("n\u00e1stupce")
    NÁSTUPCE("n\u00e1stupce"),
    @XmlEnumValue("dokument")
    DOKUMENT("dokument"),
    @XmlEnumValue("um\u00edst\u011bn\u00ed")
    UMÍSTĚNÍ("um\u00edst\u011bn\u00ed"),
    @XmlEnumValue("pojmenov\u00e1no po")
    POJMENOVÁNO_PO("pojmenov\u00e1no po"),
    @XmlEnumValue("p\u00edsemn\u00e1 zm\u00ednka")
    PÍSEMNÁ_ZMÍNKA("p\u00edsemn\u00e1 zm\u00ednka"),
    @XmlEnumValue("zm\u00ednka o existenci")
    ZMÍNKA_O_EXISTENCI("zm\u00ednka o existenci"),
    @XmlEnumValue("sou\u010d\u00e1st, celek")
    SOUČÁST_CELEK("sou\u010d\u00e1st, celek"),
    @XmlEnumValue("autor/tv\u016frce")
    AUTOR_TVŮRCE("autor/tv\u016frce"),
    @XmlEnumValue("souvisej\u00edc\u00ed entita")
    SOUVISEJÍCÍ_ENTITA("souvisej\u00edc\u00ed entita"),
    @XmlEnumValue("nad\u0159azen\u00e1 entita")
    NADŘAZENÁ_ENTITA("nad\u0159azen\u00e1 entita"),
    @XmlEnumValue("pod\u0159azen\u00e1 entita")
    PODŘAZENÁ_ENTITA("pod\u0159azen\u00e1 entita"),
    @XmlEnumValue("jin\u00fd")
    JINÝ("jin\u00fd");
    private final String value;

    RoleTypA(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static RoleTypA fromValue(String v) {
        for (RoleTypA c: RoleTypA.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
