//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.11.24 at 04:42:06 PM CET 
//


package cz.tacr.elza.interpi.ws.wo;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for udalostTypA.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="udalostTypA"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="narození"/&gt;
 *     &lt;enumeration value="úmrtí"/&gt;
 *     &lt;enumeration value="členství"/&gt;
 *     &lt;enumeration value="významné aktivity"/&gt;
 *     &lt;enumeration value="uzavření nebo ukončení manželství"/&gt;
 *     &lt;enumeration value="zaměstnání"/&gt;
 *     &lt;enumeration value="studium"/&gt;
 *     &lt;enumeration value="udělení ocenění"/&gt;
 *     &lt;enumeration value="změna jména/identity"/&gt;
 *     &lt;enumeration value="první písemná zmínka"/&gt;
 *     &lt;enumeration value="narození prvního známého člena rodu/rodiny"/&gt;
 *     &lt;enumeration value="poslední písemná zmínka"/&gt;
 *     &lt;enumeration value="úmrtí posledního známého člena rodu/rodiny"/&gt;
 *     &lt;enumeration value="zřízení, založení"/&gt;
 *     &lt;enumeration value="zapsání"/&gt;
 *     &lt;enumeration value="odštěpení"/&gt;
 *     &lt;enumeration value="zrušení, likvidace"/&gt;
 *     &lt;enumeration value="rozpuštění"/&gt;
 *     &lt;enumeration value="konkurs"/&gt;
 *     &lt;enumeration value="výmaz z evidence"/&gt;
 *     &lt;enumeration value="sloučení"/&gt;
 *     &lt;enumeration value="rozejítí se"/&gt;
 *     &lt;enumeration value="změna majitele"/&gt;
 *     &lt;enumeration value="přesun na jiné místo"/&gt;
 *     &lt;enumeration value="změna nadřazené korporace"/&gt;
 *     &lt;enumeration value="členství"/&gt;
 *     &lt;enumeration value="udělení ocenění"/&gt;
 *     &lt;enumeration value="počátek působení"/&gt;
 *     &lt;enumeration value="konec působení"/&gt;
 *     &lt;enumeration value="vznik"/&gt;
 *     &lt;enumeration value="zánik"/&gt;
 *     &lt;enumeration value="změna majitele, držitele"/&gt;
 *     &lt;enumeration value="historické mílníky"/&gt;
 *     &lt;enumeration value="začátek"/&gt;
 *     &lt;enumeration value="konec"/&gt;
 *     &lt;enumeration value="vydání"/&gt;
 *     &lt;enumeration value="první realizace"/&gt;
 *     &lt;enumeration value="počátek platnosti"/&gt;
 *     &lt;enumeration value="zničení, zánik"/&gt;
 *     &lt;enumeration value="ukončení vydávání"/&gt;
 *     &lt;enumeration value="poslední realizace"/&gt;
 *     &lt;enumeration value="poslední zmínka"/&gt;
 *     &lt;enumeration value="úprava, změna"/&gt;
 *     &lt;enumeration value="změna vlastnictví, správy"/&gt;
 *     &lt;enumeration value="změna umístění/uložení"/&gt;
 *     &lt;enumeration value="konec platnosti"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "udalostTypA")
@XmlEnum
public enum UdalostTypA {

    @XmlEnumValue("narozen\u00ed")
    NAROZENÍ("narozen\u00ed"),
    @XmlEnumValue("\u00famrt\u00ed")
    ÚMRTÍ("\u00famrt\u00ed"),
    @XmlEnumValue("\u010dlenstv\u00ed")
    ČLENSTVÍ("\u010dlenstv\u00ed"),
    @XmlEnumValue("v\u00fdznamn\u00e9 aktivity")
    VÝZNAMNÉ_AKTIVITY("v\u00fdznamn\u00e9 aktivity"),
    @XmlEnumValue("uzav\u0159en\u00ed nebo ukon\u010den\u00ed man\u017eelstv\u00ed")
    UZAVŘENÍ_NEBO_UKONČENÍ_MANŽELSTVÍ("uzav\u0159en\u00ed nebo ukon\u010den\u00ed man\u017eelstv\u00ed"),
    @XmlEnumValue("zam\u011bstn\u00e1n\u00ed")
    ZAMĚSTNÁNÍ("zam\u011bstn\u00e1n\u00ed"),
    @XmlEnumValue("studium")
    STUDIUM("studium"),
    @XmlEnumValue("ud\u011blen\u00ed ocen\u011bn\u00ed")
    UDĚLENÍ_OCENĚNÍ("ud\u011blen\u00ed ocen\u011bn\u00ed"),
    @XmlEnumValue("zm\u011bna jm\u00e9na/identity")
    ZMĚNA_JMÉNA_IDENTITY("zm\u011bna jm\u00e9na/identity"),
    @XmlEnumValue("prvn\u00ed p\u00edsemn\u00e1 zm\u00ednka")
    PRVNÍ_PÍSEMNÁ_ZMÍNKA("prvn\u00ed p\u00edsemn\u00e1 zm\u00ednka"),
    @XmlEnumValue("narozen\u00ed prvn\u00edho zn\u00e1m\u00e9ho \u010dlena rodu/rodiny")
    NAROZENÍ_PRVNÍHO_ZNÁMÉHO_ČLENA_RODU_RODINY("narozen\u00ed prvn\u00edho zn\u00e1m\u00e9ho \u010dlena rodu/rodiny"),
    @XmlEnumValue("posledn\u00ed p\u00edsemn\u00e1 zm\u00ednka")
    POSLEDNÍ_PÍSEMNÁ_ZMÍNKA("posledn\u00ed p\u00edsemn\u00e1 zm\u00ednka"),
    @XmlEnumValue("\u00famrt\u00ed posledn\u00edho zn\u00e1m\u00e9ho \u010dlena rodu/rodiny")
    ÚMRTÍ_POSLEDNÍHO_ZNÁMÉHO_ČLENA_RODU_RODINY("\u00famrt\u00ed posledn\u00edho zn\u00e1m\u00e9ho \u010dlena rodu/rodiny"),
    @XmlEnumValue("z\u0159\u00edzen\u00ed, zalo\u017een\u00ed")
    ZŘÍZENÍ_ZALOŽENÍ("z\u0159\u00edzen\u00ed, zalo\u017een\u00ed"),
    @XmlEnumValue("zaps\u00e1n\u00ed")
    ZAPSÁNÍ("zaps\u00e1n\u00ed"),
    @XmlEnumValue("od\u0161t\u011bpen\u00ed")
    ODŠTĚPENÍ("od\u0161t\u011bpen\u00ed"),
    @XmlEnumValue("zru\u0161en\u00ed, likvidace")
    ZRUŠENÍ_LIKVIDACE("zru\u0161en\u00ed, likvidace"),
    @XmlEnumValue("rozpu\u0161t\u011bn\u00ed")
    ROZPUŠTĚNÍ("rozpu\u0161t\u011bn\u00ed"),
    @XmlEnumValue("konkurs")
    KONKURS("konkurs"),
    @XmlEnumValue("v\u00fdmaz z evidence")
    VÝMAZ_Z_EVIDENCE("v\u00fdmaz z evidence"),
    @XmlEnumValue("slou\u010den\u00ed")
    SLOUČENÍ("slou\u010den\u00ed"),
    @XmlEnumValue("rozej\u00edt\u00ed se")
    ROZEJÍTÍ_SE("rozej\u00edt\u00ed se"),
    @XmlEnumValue("zm\u011bna majitele")
    ZMĚNA_MAJITELE("zm\u011bna majitele"),
    @XmlEnumValue("p\u0159esun na jin\u00e9 m\u00edsto")
    PŘESUN_NA_JINÉ_MÍSTO("p\u0159esun na jin\u00e9 m\u00edsto"),
    @XmlEnumValue("zm\u011bna nad\u0159azen\u00e9 korporace")
    ZMĚNA_NADŘAZENÉ_KORPORACE("zm\u011bna nad\u0159azen\u00e9 korporace"),
    @XmlEnumValue("po\u010d\u00e1tek p\u016fsoben\u00ed")
    POČÁTEK_PŮSOBENÍ("po\u010d\u00e1tek p\u016fsoben\u00ed"),
    @XmlEnumValue("konec p\u016fsoben\u00ed")
    KONEC_PŮSOBENÍ("konec p\u016fsoben\u00ed"),
    @XmlEnumValue("vznik")
    VZNIK("vznik"),
    @XmlEnumValue("z\u00e1nik")
    ZÁNIK("z\u00e1nik"),
    @XmlEnumValue("zm\u011bna majitele, dr\u017eitele")
    ZMĚNA_MAJITELE_DRŽITELE("zm\u011bna majitele, dr\u017eitele"),
    @XmlEnumValue("historick\u00e9 m\u00edln\u00edky")
    HISTORICKÉ_MÍLNÍKY("historick\u00e9 m\u00edln\u00edky"),
    @XmlEnumValue("za\u010d\u00e1tek")
    ZAČÁTEK("za\u010d\u00e1tek"),
    @XmlEnumValue("konec")
    KONEC("konec"),
    @XmlEnumValue("vyd\u00e1n\u00ed")
    VYDÁNÍ("vyd\u00e1n\u00ed"),
    @XmlEnumValue("prvn\u00ed realizace")
    PRVNÍ_REALIZACE("prvn\u00ed realizace"),
    @XmlEnumValue("po\u010d\u00e1tek platnosti")
    POČÁTEK_PLATNOSTI("po\u010d\u00e1tek platnosti"),
    @XmlEnumValue("zni\u010den\u00ed, z\u00e1nik")
    ZNIČENÍ_ZÁNIK("zni\u010den\u00ed, z\u00e1nik"),
    @XmlEnumValue("ukon\u010den\u00ed vyd\u00e1v\u00e1n\u00ed")
    UKONČENÍ_VYDÁVÁNÍ("ukon\u010den\u00ed vyd\u00e1v\u00e1n\u00ed"),
    @XmlEnumValue("posledn\u00ed realizace")
    POSLEDNÍ_REALIZACE("posledn\u00ed realizace"),
    @XmlEnumValue("posledn\u00ed zm\u00ednka")
    POSLEDNÍ_ZMÍNKA("posledn\u00ed zm\u00ednka"),
    @XmlEnumValue("\u00faprava, zm\u011bna")
    ÚPRAVA_ZMĚNA("\u00faprava, zm\u011bna"),
    @XmlEnumValue("zm\u011bna vlastnictv\u00ed, spr\u00e1vy")
    ZMĚNA_VLASTNICTVÍ_SPRÁVY("zm\u011bna vlastnictv\u00ed, spr\u00e1vy"),
    @XmlEnumValue("zm\u011bna um\u00edst\u011bn\u00ed/ulo\u017een\u00ed")
    ZMĚNA_UMÍSTĚNÍ_ULOŽENÍ("zm\u011bna um\u00edst\u011bn\u00ed/ulo\u017een\u00ed"),
    @XmlEnumValue("konec platnosti")
    KONEC_PLATNOSTI("konec platnosti");
    private final String value;

    UdalostTypA(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static UdalostTypA fromValue(String v) {
        for (UdalostTypA c: UdalostTypA.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
