//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.11.24 at 04:42:06 PM CET 
//


package cz.tacr.elza.interpi.ws.wo;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for stavTyp.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="stavTyp"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="rozpracovaný návrh"/&gt;
 *     &lt;enumeration value="dokončený návrh"/&gt;
 *     &lt;enumeration value="rozpracovaná revize"/&gt;
 *     &lt;enumeration value="dokončená revize"/&gt;
 *     &lt;enumeration value="schválený záznam"/&gt;
 *     &lt;enumeration value="zrušený záznam"/&gt;
 *     &lt;enumeration value="bez revize INTERPI"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "stavTyp")
@XmlEnum
public enum StavTyp {

    @XmlEnumValue("rozpracovan\u00fd n\u00e1vrh")
    ROZPRACOVANÝ_NÁVRH("rozpracovan\u00fd n\u00e1vrh"),
    @XmlEnumValue("dokon\u010den\u00fd n\u00e1vrh")
    DOKONČENÝ_NÁVRH("dokon\u010den\u00fd n\u00e1vrh"),
    @XmlEnumValue("rozpracovan\u00e1 revize")
    ROZPRACOVANÁ_REVIZE("rozpracovan\u00e1 revize"),
    @XmlEnumValue("dokon\u010den\u00e1 revize")
    DOKONČENÁ_REVIZE("dokon\u010den\u00e1 revize"),
    @XmlEnumValue("schv\u00e1len\u00fd z\u00e1znam")
    SCHVÁLENÝ_ZÁZNAM("schv\u00e1len\u00fd z\u00e1znam"),
    @XmlEnumValue("zru\u0161en\u00fd z\u00e1znam")
    ZRUŠENÝ_ZÁZNAM("zru\u0161en\u00fd z\u00e1znam"),
    @XmlEnumValue("bez revize INTERPI")
    BEZ_REVIZE_INTERPI("bez revize INTERPI");
    private final String value;

    StavTyp(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static StavTyp fromValue(String v) {
        for (StavTyp c: StavTyp.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
