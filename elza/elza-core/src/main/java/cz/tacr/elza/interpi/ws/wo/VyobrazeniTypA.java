//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.11.24 at 04:42:06 PM CET 
//


package cz.tacr.elza.interpi.ws.wo;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for vyobrazeniTypA.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="vyobrazeniTypA"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="osobní erb"/&gt;
 *     &lt;enumeration value="fotografie nebo jiné vyobrazení osoby"/&gt;
 *     &lt;enumeration value="osobní pečeť"/&gt;
 *     &lt;enumeration value="erb"/&gt;
 *     &lt;enumeration value="logo"/&gt;
 *     &lt;enumeration value="značka"/&gt;
 *     &lt;enumeration value="symbol"/&gt;
 *     &lt;enumeration value="vlajka"/&gt;
 *     &lt;enumeration value="jiné"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "vyobrazeniTypA")
@XmlEnum
public enum VyobrazeniTypA {

    @XmlEnumValue("osobn\u00ed erb")
    OSOBNÍ_ERB("osobn\u00ed erb"),
    @XmlEnumValue("fotografie nebo jin\u00e9 vyobrazen\u00ed osoby")
    FOTOGRAFIE_NEBO_JINÉ_VYOBRAZENÍ_OSOBY("fotografie nebo jin\u00e9 vyobrazen\u00ed osoby"),
    @XmlEnumValue("osobn\u00ed pe\u010de\u0165")
    OSOBNÍ_PEČEŤ("osobn\u00ed pe\u010de\u0165"),
    @XmlEnumValue("erb")
    ERB("erb"),
    @XmlEnumValue("logo")
    LOGO("logo"),
    @XmlEnumValue("zna\u010dka")
    ZNAČKA("zna\u010dka"),
    @XmlEnumValue("symbol")
    SYMBOL("symbol"),
    @XmlEnumValue("vlajka")
    VLAJKA("vlajka"),
    @XmlEnumValue("jin\u00e9")
    JINÉ("jin\u00e9");
    private final String value;

    VyobrazeniTypA(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static VyobrazeniTypA fromValue(String v) {
        for (VyobrazeniTypA c: VyobrazeniTypA.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
