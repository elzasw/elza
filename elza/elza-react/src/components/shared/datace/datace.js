/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
/* eslint-disable */

function peg$subclass(child, parent) {
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = 'SyntaxError';

    if (typeof Error.captureStackTrace === 'function') {
        Error.captureStackTrace(this, peg$SyntaxError);
    }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
            return '"' + literalEscape(expectation.text) + '"';
        },

        class: function(expectation) {
            var escapedParts = '',
                i;

            for (i = 0; i < expectation.parts.length; i++) {
                escapedParts +=
                    expectation.parts[i] instanceof Array
                        ? classEscape(expectation.parts[i][0]) + '-' + classEscape(expectation.parts[i][1])
                        : classEscape(expectation.parts[i]);
            }

            return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']';
        },

        any: function(expectation) {
            return 'libovolný znak';
        },

        end: function(expectation) {
            return 'konec vstupu';
        },

        other: function(expectation) {
            return expectation.description;
        },
    };

    function hex(ch) {
        return ch
            .charCodeAt(0)
            .toString(16)
            .toUpperCase();
    }

    function literalEscape(s) {
        return s
            .replace(/\\/g, '\\\\')
            .replace(/"/g, '\\"')
            .replace(/\0/g, '\\0')
            .replace(/\t/g, '\\t')
            .replace(/\n/g, '\\n')
            .replace(/\r/g, '\\r')
            .replace(/[\x00-\x0F]/g, function(ch) {
                return '\\x0' + hex(ch);
            })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
                return '\\x' + hex(ch);
            });
    }

    function classEscape(s) {
        return s
            .replace(/\\/g, '\\\\')
            .replace(/\]/g, '\\]')
            .replace(/\^/g, '\\^')
            .replace(/-/g, '\\-')
            .replace(/\0/g, '\\0')
            .replace(/\t/g, '\\t')
            .replace(/\n/g, '\\n')
            .replace(/\r/g, '\\r')
            .replace(/[\x00-\x0F]/g, function(ch) {
                return '\\x0' + hex(ch);
            })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
                return '\\x' + hex(ch);
            });
    }

    function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
        var descriptions = new Array(expected.length),
            i,
            j;

        for (i = 0; i < expected.length; i++) {
            descriptions[i] = describeExpectation(expected[i]);
        }

        descriptions.sort();

        if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                    descriptions[j] = descriptions[i];
                    j++;
                }
            }
            descriptions.length = j;
        }

        switch (descriptions.length) {
            case 1:
                return descriptions[0];

            case 2:
                return descriptions[0] + ' nebo ' + descriptions[1];

            default:
                return descriptions.slice(0, -1).join(', ') + ', nebo ' + descriptions[descriptions.length - 1];
        }
    }

    function describeFound(found) {
        return found ? '"' + literalEscape(found) + '"' : 'konec vstupu';
    }

    return 'Bylo očekáváno ' + describeExpected(expected) + ' ale text obsahuje ' + describeFound(found);
};

function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},
        peg$startRuleFunctions = {Expression: peg$parseExpression},
        peg$startRuleFunction = peg$parseExpression,
        peg$c0 = /^[\-\/]/,
        peg$c1 = peg$classExpectation(['-', '/'], false, false),
        peg$c2 = function(a, b) {
            return {from: {...a}, to: {...b}};
        },
        peg$c3 = '(',
        peg$c4 = peg$literalExpectation('(', false),
        peg$c5 = ')',
        peg$c6 = peg$literalExpectation(')', false),
        peg$c7 = function(instant) {
            return {...instant};
        },
        peg$c8 = '[',
        peg$c9 = peg$literalExpectation('[', false),
        peg$c10 = ']',
        peg$c11 = peg$literalExpectation(']', false),
        peg$c12 = 'bc ',
        peg$c13 = peg$literalExpectation('bc ', false),
        peg$c14 = function(r) {
            return {...r, bc: true};
        },
        peg$c15 = function(r) {
            return {...r, bc: false};
        },
        peg$c16 = '. st.',
        peg$c17 = peg$literalExpectation('. st.', false),
        peg$c18 = '.st.',
        peg$c19 = peg$literalExpectation('.st.', false),
        peg$c20 = 'st',
        peg$c21 = peg$literalExpectation('st', false),
        peg$c22 = function(century) {
            return {c: century};
        },
        peg$c23 = function(year) {
            return {y: year};
        },
        peg$c24 = '.',
        peg$c25 = peg$literalExpectation('.', false),
        peg$c26 = function(month, year) {
            return {...month, ...year};
        },
        peg$c27 = function(day, month, year) {
            return {...day, ...month, ...year};
        },
        peg$c28 = ' ',
        peg$c29 = peg$literalExpectation(' ', false),
        peg$c30 = function(date, time) {
            return {...date, ...time};
        },
        peg$c31 = ':',
        peg$c32 = peg$literalExpectation(':', false),
        peg$c33 = function(hour, minute, second) {
            return {...hour, ...minute, ...second};
        },
        peg$c34 = function(hour, minute) {
            return {...hour, ...minute};
        },
        peg$c35 = function(month) {
            return {M: month};
        },
        peg$c36 = function(day) {
            return {d: day};
        },
        peg$c37 = function(hour) {
            return {h: hour};
        },
        peg$c38 = function(minute) {
            return {m: minute};
        },
        peg$c39 = function(second) {
            return {s: second};
        },
        peg$c40 = /^[0-9]/,
        peg$c41 = peg$classExpectation([['0', '9']], false, false),
        peg$c42 = function() {
            return parseInt(text(), 10);
        },
        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{line: 1, column: 1}],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,
        peg$result;

    if ('startRule' in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error('Can\'t start parsing from rule "' + options.startRule + '".');
        }

        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
        return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

        throw peg$buildStructuredError(
            [peg$otherExpectation(description)],
            input.substring(peg$savedPos, peg$currPos),
            location,
        );
    }

    function error(message, location) {
        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

        throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
        return {type: 'literal', text: text, ignoreCase: ignoreCase};
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
        return {type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase};
    }

    function peg$anyExpectation() {
        return {type: 'any'};
    }

    function peg$endExpectation() {
        return {type: 'end'};
    }

    function peg$otherExpectation(description) {
        return {type: 'other', description: description};
    }

    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos],
            p;

        if (details) {
            return details;
        } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
                p--;
            }

            details = peg$posDetailsCache[p];
            details = {
                line: details.line,
                column: details.column,
            };

            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++;
                    details.column = 1;
                } else {
                    details.column++;
                }

                p++;
            }

            peg$posDetailsCache[pos] = details;
            return details;
        }
    }

    function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos),
            endPosDetails = peg$computePosDetails(endPos);

        return {
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column,
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column,
            },
        };
    }

    function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) {
            return;
        }

        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }

        peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }

    function peg$parseExpression() {
        var s0;

        s0 = peg$parseInterval();
        if (s0 === peg$FAILED) {
            s0 = peg$parseInstantEstimate();
        }

        return s0;
    }

    function peg$parseInterval() {
        var s0, s1, s2, s3;

        s0 = peg$currPos;
        s1 = peg$parseInstantEstimate();
        if (s1 !== peg$FAILED) {
            if (peg$c0.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c1);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseInstantEstimate();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c2(s1, s3);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseInstantEstimate() {
        var s0;

        s0 = peg$parseEstimate();
        if (s0 === peg$FAILED) {
            s0 = peg$parseInstant();
        }

        return s0;
    }

    function peg$parseEstimate() {
        var s0;

        s0 = peg$parseEstimateParen();
        if (s0 === peg$FAILED) {
            s0 = peg$parseEstimateBracket();
        }

        return s0;
    }

    function peg$parseEstimateParen() {
        var s0, s1, s2, s3;

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c3;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c4);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseInstant();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                    s3 = peg$c5;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c6);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c7(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseEstimateBracket() {
        var s0, s1, s2, s3;

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c8;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c9);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseInstant();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                    s3 = peg$c10;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c11);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c7(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseInstant() {
        var s0;

        s0 = peg$parseBcRawInstant();
        if (s0 === peg$FAILED) {
            s0 = peg$parseNoBcRawInstant();
        }

        return s0;
    }

    function peg$parseBcRawInstant() {
        var s0, s1, s2;

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c12) {
            s1 = peg$c12;
            peg$currPos += 3;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c13);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseRawInstant();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c14(s2);
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseNoBcRawInstant() {
        var s0, s1;

        s0 = peg$currPos;
        s1 = peg$parseRawInstant();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c15(s1);
        }
        s0 = s1;

        return s0;
    }

    function peg$parseRawInstant() {
        var s0;

        s0 = peg$parseDateTime();
        if (s0 === peg$FAILED) {
            s0 = peg$parseDate();
            if (s0 === peg$FAILED) {
                s0 = peg$parseMonthYear();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseCentury();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseYear();
                    }
                }
            }
        }

        return s0;
    }

    function peg$parseCentury() {
        var s0, s1, s2;

        s0 = peg$currPos;
        s1 = peg$parseUnsignedInteger();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c16) {
                s2 = peg$c16;
                peg$currPos += 5;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c17);
                }
            }
            if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c18) {
                    s2 = peg$c18;
                    peg$currPos += 4;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c19);
                    }
                }
                if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c20) {
                        s2 = peg$c20;
                        peg$currPos += 2;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c21);
                        }
                    }
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s1);
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseYear() {
        var s0, s1;

        s0 = peg$currPos;
        s1 = peg$parseUnsignedInteger();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c23(s1);
        }
        s0 = s1;

        return s0;
    }

    function peg$parseMonthYear() {
        var s0, s1, s2, s3;

        s0 = peg$currPos;
        s1 = peg$parseMonth();
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
                s2 = peg$c24;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c25);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseYear();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c26(s1, s3);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseDate() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = peg$parseDay();
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
                s2 = peg$c24;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c25);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseMonth();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s4 = peg$c24;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c25);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseYear();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c27(s1, s3, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseDateTime() {
        var s0, s1, s2, s3;

        s0 = peg$currPos;
        s1 = peg$parseDate();
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
                s2 = peg$c28;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c29);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseTime();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c30(s1, s3);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseTime() {
        var s0;

        s0 = peg$parseLongTime();
        if (s0 === peg$FAILED) {
            s0 = peg$parseShortTime();
        }

        return s0;
    }

    function peg$parseLongTime() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = peg$parseHour();
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
                s2 = peg$c31;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c32);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseMinute();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                        s4 = peg$c31;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c32);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseSecond();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c33(s1, s3, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseShortTime() {
        var s0, s1, s2, s3;

        s0 = peg$currPos;
        s1 = peg$parseHour();
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
                s2 = peg$c31;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c32);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseMinute();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c34(s1, s3);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseMonth() {
        var s0, s1;

        s0 = peg$currPos;
        s1 = peg$parseUnsignedInteger();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c35(s1);
        }
        s0 = s1;

        return s0;
    }

    function peg$parseDay() {
        var s0, s1;

        s0 = peg$currPos;
        s1 = peg$parseUnsignedInteger();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c36(s1);
        }
        s0 = s1;

        return s0;
    }

    function peg$parseHour() {
        var s0, s1;

        s0 = peg$currPos;
        s1 = peg$parseUnsignedInteger();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c37(s1);
        }
        s0 = s1;

        return s0;
    }

    function peg$parseMinute() {
        var s0, s1;

        s0 = peg$currPos;
        s1 = peg$parseUnsignedInteger();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c38(s1);
        }
        s0 = s1;

        return s0;
    }

    function peg$parseSecond() {
        var s0, s1;

        s0 = peg$currPos;
        s1 = peg$parseUnsignedInteger();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c39(s1);
        }
        s0 = s1;

        return s0;
    }

    function peg$parseUnsignedInteger() {
        var s0, s1, s2;

        s0 = peg$currPos;
        s1 = [];
        if (peg$c40.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c41);
            }
        }
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$c40.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c41);
                    }
                }
            }
        } else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c42();
        }
        s0 = s1;

        return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
        }

        throw peg$buildStructuredError(
            peg$maxFailExpected,
            peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
            peg$maxFailPos < input.length
                ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                : peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
        );
    }
}

export default peg$parse;

// module.exports = {
//   SyntaxError: peg$SyntaxError,
//   parse:       peg$parse
// };
