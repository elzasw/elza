const {editWebpackPlugin, getPaths, edit, appendWebpackPlugin} = require('@rescripts/utilities');
const path = require('path');
const webpack = require('webpack');
const CircularDependencyPlugin = require('circular-dependency-plugin');
const fs = require('fs');

module.exports = {
    'use-tslint-config': 'tslint.json',
    'use-eslint-config': 'package',
    webpack: (config) => {
        let messagesRaw = fs.readFileSync('../elza-web/src/main/resources/static/res/js/messages_cs.js', {encoding: 'utf-8'});
        eval(messagesRaw);

        config.resolve.modules.push(path.resolve(__dirname, 'src'));
        config.resolve.alias = {
            ...(config.resolve.alias || {}),
            'stompjs': path.resolve(__dirname, "node_modules") + '/stompjs/lib/stomp.js',
        };
        config.module.rules[1].use[0].options.baseConfig = require('./package').eslintConfig;

        const styleLoaders = getPaths(
            // Styleloaders are in config.module.rules inside an object only containing the "oneOf" prop
            (inQuestion) => inQuestion && !!inQuestion.oneOf,
            config
        );

        /*
        config = appendWebpackPlugin(new webpack.ProvidePlugin({
            $: "jquery",
            jQuery: "jquery"
        }), config);
         */


        const isProduction = config.mode === 'production';

        config = appendWebpackPlugin(new webpack.DefinePlugin({
            'window.devMessages': isProduction ? false : JSON.stringify(messages),
            __DEVELOPMENT__: !isProduction,
            __DEVTOOLS__: false,
            __SHOW_DEVTOOLS__: false,
            __DEV__: !isProduction,
            'window.__DEV__': !isProduction
        }), config);

        if (isProduction) {
            appendWebpackPlugin(new CircularDependencyPlugin({
                // exclude detection of files based on a RegExp
                exclude: /node_modules/,
                // add errors to webpack instead of warnings
                failOnError: true
            }), config);

            config.optimization.runtimeChunk = false;
            config.optimization.splitChunks = {
                cacheGroups: {
                    default: false
                }
            };
            const toReplaceHash = '[contenthash:8].';
            const toReplaceDir = 'static/js';
            const replacementDir = 'static/res/js';
            const BLANK = '';
            config.output.filename = config.output.filename
                .replace(toReplaceHash, BLANK)
                .replace(toReplaceDir, replacementDir);
            config.output.chunkFilename = config.output.filename
                .replace(toReplaceHash, BLANK)
                .replace(toReplaceDir, replacementDir);

            const edited = editWebpackPlugin(
                p => {
                    p.options.filename = p.options.filename.replace(toReplaceHash, BLANK);
                    p.options.chunkFilename = p.options.chunkFilename.replace(toReplaceHash, BLANK);
                    p.options.moduleFilename = ({name}) => `static/res/css/${name}.css`;
                    return p
                },
                'MiniCssExtractPlugin',
                config,
            );

            edited.module.rules.forEach(rule => {
                if (rule.oneOf) {
                    rule.oneOf.forEach(loader => {
                        if (loader.loader && (loader.loader.indexOf("url-loader") > -1 || loader.loader.indexOf("file-loader") > -1)) {
                            loader.options = {
                                ...loader.options,
                                name: "static/res/media/[name].[hash:8].[ext]"
                            }
                        }
                    })
                }
            });

            return edited;
        } else {
            return config;
        }
    },
}
